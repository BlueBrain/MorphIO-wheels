# CI on Windows via appveyor
image: Visual Studio 2017
environment:
  global:
    REPO_DIR: MorphIO
    PACKAGE_NAME: morphio
    BUILD_DEPENDS: "hdf5"
    MORPHIO_CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"

  matrix:
    # AppVeyor builds are sequential so I have put python 3.7 because this is the python I have on my local machine
    # so I prefer to have it built first
    - PYTHON: "C:\\Miniconda37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

matrix:
    fast_finish: true

platform:
    - x64

install:
    # Fetch submodules
    - git submodule update --init --recursive

    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - conda info

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"


build_script:
   # - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
    # Fix MSVC builds for 64-bit Python. See:
    # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
    # - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

    # Install build requirements
    - conda create --yes -n build_env python=%PYTHON_VERSION% %BUILD_DEPENDS%
    - activate build_env

    # Additional pre install steps:
    - set HDF5_DIR=%CONDA_PREFIX%\Library\
    - set LIBRARY_PATH=%HDF5_DIR%\lib
    - SET PATH=%HDF5_DIR%\lib;%PATH%

    # build wheel:
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - cd ..

    # Add hdf5.dll to the wheel
    - python delocate.py %REPO_DIR%\dist %HDF5_DIR%\bin


test_script:
    # create test env
    - virtualenv --python %PYTHON%\Python.exe test_env
    - test_env\Scripts\activate.bat
    - where python
    - python -m pip install -r %REPO_DIR%\tests\requirement_tests.txt

    # install from wheel
    - python -m pip install --pre --no-index --find-links %REPO_DIR%\dist\ %PACKAGE_NAME%

    # Change into an innocuous directory and find tests from installation
    - python --version
    - python -c "import morphio; print(morphio.version)"
    - echo %PATH%
    - nosetests %REPO_DIR%\tests --exclude test_write_basic


artifacts:
    - path: "%REPO_DIR%\\dist\\*"

on_success:
  - python -m pip install twine
  - echo %PYPI_USERNAME%
  - python -c "import os; print(os.getenv('PYPI_SECRET') is None)"
  - python -c "import os; print(os.getenv('PYPI_SECRET') == '')"
  - twine upload -u %PYPI_USERNAME% -p %PYPI_SECRET% --repository-url https://test.pypi.org/legacy/ %REPO_DIR%\\dist\* --verbose
